/// Une personne physique peut être mandataire d'un mandat représentatif ou bien d'un mandat dit simple, comme par exemple être membre d'une commission. Un `mandat représentatif <https://fr.wikipedia.org/wiki/Mandat_repr%C3%A9sentatif>`__ est \"une forme de mandat politique qui possède la caractéristique d'être général, libre et non révocable\".
model Mandat {
  uid                      String                     @id
  /// Hachage de l'objet
  hash                     String                     @unique
  acteurRefUid             String?
  legislature              String?
  typeOrgane               String
  dateDebut                DateTime
  datePublication          DateTime?
  dateFin                  DateTime?
  preseance                String?
  nominPrincipale          String
  codeQualite              String?
  libQualite               String
  libQualiteSex            String?
  libelle                  String?
  causeMandat              String?
  refCirconscription       String?
  region                   String?
  regionType               String?
  departement              String?
  numDepartement           String?
  numCirco                 String?
  datePriseFonction        DateTime?
  premiereElection         String?
  causeFin                 String?
  placeHemicycle           String?
  xsiType                  String?
  mandatRemplaceRefUid     String?                    @unique
  missionPrecedenteRefUid  String?                    @unique
  vecteurRecherche         Unsupported("tsvector")?   @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(libelle, ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(\"libQualite\", ''::text))::character varying)))"))
  collaborateurs           Collaborateur[]
  initiateurActeLegislatif InitiateurActeLegislatif[]
  dossiers                 InitiateurDossier[]
  acteurRef                Acteur?                    @relation("Mandat_Acteur", fields: [acteurRefUid], references: [uid], onDelete: Cascade)
  mandatRemplaceRef        Mandat?                    @relation("MandatRemplace", fields: [mandatRemplaceRefUid], references: [uid])
  mandatRemplacementRef    Mandat?                    @relation("MandatRemplace")
  missionPrecedenteRef     Mandat?                    @relation("MissionSequence", fields: [missionPrecedenteRefUid], references: [uid])
  missionSuivanteRef       Mandat?                    @relation("MissionSequence")
  organesMandats           OrganeMandat[]
  question                 Question[]
  suppleantRef             Suppleant?
  votes                    Vote[]

  @@index([vecteurRecherche], type: Gin)
  @@index([acteurRefUid])
}

model OrganeMandat {
  id           Int    @id @default(autoincrement())
  slug         String @unique
  organeRefUid String
  mandatRefUid String
  mandatRef    Mandat @relation(fields: [mandatRefUid], references: [uid], onDelete: Cascade)
  organeRef    Organe @relation(fields: [organeRefUid], references: [uid], onDelete: Cascade)

  @@index([organeRefUid])
  @@index([mandatRefUid])
}

model Collaborateur {
  id               Int                      @id @default(autoincrement())
  /// Hachage de l'objet
  hash             String                   @unique
  qualite          String
  nom              String
  prenom           String
  mandatRefUid     String
  vecteurRecherche Unsupported("tsvector")? @default(dbgenerated("to_tsvector('french'::regconfig, ((immutable_unaccent((COALESCE(nom, ''::text))::character varying) || ' '::text) || immutable_unaccent((COALESCE(prenom, ''::text))::character varying)))"))
  mandatRef        Mandat                   @relation(fields: [mandatRefUid], references: [uid], onDelete: Cascade)

  @@index([vecteurRecherche], type: Gin)
  @@index([mandatRefUid])
}

model Suppleant {
  id           Int       @id @default(autoincrement())
  dateDebut    DateTime
  dateFin      DateTime?
  acteurRefUid String
  mandatRefUid String    @unique
  acteurRef    Acteur    @relation(fields: [acteurRefUid], references: [uid], onDelete: Cascade)
  mandatRef    Mandat    @relation(fields: [mandatRefUid], references: [uid], onDelete: Cascade)

  @@index([acteurRefUid])
  @@index([mandatRefUid])
}
